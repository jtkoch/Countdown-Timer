{"version":3,"sources":["components/TimerInput.js","components/TimerDisplay.js","App.js","serviceWorker.js","index.js"],"names":["TimerInput","minutes","handleChange","handleSubmit","resetTimer","active","Form","className","onSubmit","Group","Label","htmlFor","Control","placeholder","onChange","id","inputProps","min","name","type","value","required","Button","disabled","variant","blinker","keyframes","blinkAnimation","css","Display","styled","h1","warning","blink","Click","button","TimerDisplay","condition","then","otherwise","seconds","pause","resume","setRate","rate","paused","Math","floor","slice","onClick","Timer","div","Warning","p","App","interval","useState","setSeconds","setMinutes","setPaused","setActive","halfTime","useEffect","setInterval","clearInterval","Navbar","bg","Brand","e","preventDefault","parseInt","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.804fb4e3.chunk.js","sourcesContent":["import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\n\nfunction TimerInput({ minutes, handleChange, handleSubmit, resetTimer, active }) {\n    return (\n        <Form className=\"p-0 fluid={true} mt-5 d-flex\" onSubmit={active ? resetTimer : handleSubmit}>\n            <Form.Group>\n                <Form.Label htmlFor=\"timer\" >Countdown Timer</Form.Label>\n                <Form.Control\n                    placeholder=\"5\"\n                    onChange={handleChange}\n                    id=\"timer\"\n                    inputProps={{ min: '0' }}\n                    name=\"timer\"\n                    type=\"number\"\n                    value={minutes}\n                    required\n                />\n                <Button className=\"mt-3 p-2\" disabled={minutes === 0} variant=\"primary\" type=\"submit\">\n                    {active ? 'Clear' : 'Submit'}\n                </Button>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default TimerInput","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport Button from 'react-bootstrap/Button'\n\nconst blinker = keyframes`\n    50% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n`\n\nconst blinkAnimation = css`\n    animation: ${blinker} 1s linear infinite;\n    color: rbg(255, 0, 0);\n`\n\nconst Display = styled.h1`\n    display: flex;\n    font-size: 7rem;\n    color: ${({ warning }) => (warning ? 'rgb(255, 0, 0)' : 'rgb(0, 0, 0)')};\n    ${({ blink }) => (blink ? blinkAnimation : null)};\n`\n\nconst Click = styled.button`\n    background-color: rgb(0, 123, 255);\n    border: none;\n    color: white;\n    border-radius: 5px;\n    padding: 10px;\n`\n\nconst TimerDisplay = ({\n  seconds, pause, resume, setRate, rate, paused,\n}) => {\n  const getSeconds = () => (`0${seconds % 60}`).slice(-2);\n  const getMinutes = () => Math.floor(seconds / 60);\n  const minutes = getMinutes();\n\n  const timeBlink = () => (seconds <= 10 && seconds > 0 && minutes === 0);\n  const timeRed = () => (seconds <= 20 && seconds > 0 && minutes === 0);\n  const option = (condition, then, otherwise) => (condition ? then : otherwise);\n  return (\n    <div>\n      <div>\n        <Display blink={timeBlink()} warning={timeRed()}>\n          {`${minutes}:${getSeconds()}`}\n        </Display>\n        {\n          seconds > 0\n            ? option(paused, <Click onClick={resume}>Resume</Click>, <Click onClick={pause}>Pause</Click>)\n            : null\n      }\n      </div>\n      <div>\n        <Button className=\"m-3\" variant=\"outline-success\" type=\"button\" disabled={rate === 1000} onClick={() => setRate(1000)}>1x</Button>\n        <Button className=\"m-3\" variant=\"outline-warning\" type=\"button\" disabled={rate === 750} onClick={() => setRate(750)}>1.5x</Button>\n        <Button className=\"m-3\" variant=\"outline-danger\" type=\"button\" disabled={rate === 500} onClick={() => setRate(500)}>2x</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TimerDisplay","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport Navbar from 'react-bootstrap/Navbar'\nimport TimerInput from './components/TimerInput'\nimport TimeDisplay from './components/TimerDisplay'\n\n\nconst Timer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`\n\nconst Warning = styled.p`\n  color: rgb(255, 0, 0);\n  font-weight: 500;\n  font-size: 2rem;\n  margin-bottom: 0;\n  margin-top: 2rem;\n`\n\n\nfunction App() {\n  const [seconds, setSeconds] = useState(0)\n  const [minutes, setMinutes] = useState(0)\n  const [rate, setRate] = useState(1000)\n  const [paused, setPaused] = useState(false)\n  const [active, setActive] = useState(false)\n\n  const halfTime = (minutes / 2) * 60\n\n  let interval\n\n  useEffect(() => {\n    if (seconds) {\n      interval = setInterval(() => {\n        setSeconds(seconds - 1)\n      }, rate)\n    }\n    return () => {\n      clearInterval(interval)\n    }\n  }, [seconds])\n\n  const onPause = () => {\n    setPaused(true)\n    clearInterval(interval)\n  }\n\n  const onResume = () => {\n    setPaused(false)\n    setSeconds(seconds - 1)\n  }\n\n  const resetTimer = e => {\n    e.preventDefault()\n    setPaused(false)\n    setSeconds(0)\n    setActive(false)\n    setMinutes(0)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    setPaused(false)\n    setActive(true)\n\n    const minutesToSeconds = minutes * 60\n    setSeconds(minutesToSeconds - 1)\n  }\n\n  const handleChange = e => {\n    setMinutes(parseInt(e.target.value, 10))\n    setActive(false)\n  }\n\n  return (\n    <Timer>\n      <Navbar bg=\"transparent\">\n        <Navbar.Brand>Jensen Koch</Navbar.Brand>\n      </Navbar>\n\n      <TimerInput\n        active={active}\n        minutes={minutes}\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        resetTimer={resetTimer}\n      />\n\n      {\n        seconds <= halfTime\n          && active\n          && seconds >= 1 ? <Warning>More than halfway there!</Warning> : null\n      }\n      {\n        seconds === 0 && active ? <Warning>Time is up!</Warning> : null\n      }\n\n      <TimeDisplay\n        seconds={seconds}\n        pause={onPause}\n        paused={paused}\n        resume={onResume}\n        setRate={setRate}\n        rate={rate}\n      />\n\n    </Timer>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}